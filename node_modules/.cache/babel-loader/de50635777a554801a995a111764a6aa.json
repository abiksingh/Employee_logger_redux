{"ast":null,"code":"import _defineProperty from \"/Users/abhisheksingh/Desktop/it-logger/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { GET_LOGS, SET_LOADING, LOGS_ERROR, ADD_LOG, DELETE_LOG, SET_CURRENT, CLEAR_CURRENT, UPDATE_LOG } from '../actions/types';\nconst initialState = {\n  logs: null,\n  current: null,\n  loading: false,\n  error: null\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_LOADING:\n      return _objectSpread({}, state, {\n        loading: true\n      });\n\n    case GET_LOGS:\n      return _objectSpread({}, state, {\n        logs: action.payload,\n        loading: false\n      });\n\n    case ADD_LOG:\n      return _objectSpread({}, state, {\n        logs: [...state.logs, action.payload],\n        loading: false\n      });\n\n    case DELETE_LOG:\n      return _objectSpread({}, state, {\n        logs: state.logs.filter(log => log.id !== action.payload),\n        loading: false\n      });\n\n    case UPDATE_LOG:\n      return _objectSpread({}, state, {\n        logs: state.logs.map(log => log.id === action.payload.id ? action.payload : log)\n      });\n\n    case SET_CURRENT:\n      return _objectSpread({}, state, {\n        current: action.payload\n      });\n\n    case CLEAR_CURRENT:\n      return _objectSpread({}, state, {\n        current: null\n      });\n\n    case LOGS_ERROR:\n      console.error(action.payload);\n      return _objectSpread({}, state, {\n        error: action.payload\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/abhisheksingh/Desktop/it-logger/src/reducers/logReducer.js"],"names":["GET_LOGS","SET_LOADING","LOGS_ERROR","ADD_LOG","DELETE_LOG","SET_CURRENT","CLEAR_CURRENT","UPDATE_LOG","initialState","logs","current","loading","error","state","action","type","payload","filter","log","id","map","console"],"mappings":";;;;;;AAAA,SACIA,QADJ,EAEIC,WAFJ,EAGIC,UAHJ,EAIIC,OAJJ,EAKIC,UALJ,EAMIC,WANJ,EAOIC,aAPJ,EAQIC,UARJ,QASW,kBATX;AAcA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE,IADW;AAEjBC,EAAAA,OAAO,EAAG,IAFO;AAGjBC,EAAAA,OAAO,EAAG,KAHO;AAIjBC,EAAAA,KAAK,EAAG;AAJS,CAArB;AAUA,gBAAe,CAACC,KAAK,GAAEL,YAAR,EAAsBM,MAAtB,KAAgC;AAC3C,UAAOA,MAAM,CAACC,IAAd;AAEI,SAAKd,WAAL;AACI,+BACOY,KADP;AAEIF,QAAAA,OAAO,EAAC;AAFZ;;AAKA,SAAKX,QAAL;AACI,+BACOa,KADP;AAEIJ,QAAAA,IAAI,EAACK,MAAM,CAACE,OAFhB;AAGIL,QAAAA,OAAO,EAAC;AAHZ;;AAMA,SAAKR,OAAL;AACI,+BACOU,KADP;AAEIJ,QAAAA,IAAI,EAAE,CAAC,GAAGI,KAAK,CAACJ,IAAV,EAAgBK,MAAM,CAACE,OAAvB,CAFV;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAMA,SAAKP,UAAL;AACI,+BACOS,KADP;AAEIJ,QAAAA,IAAI,EAAEI,KAAK,CAACJ,IAAN,CAAWQ,MAAX,CAAkBC,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAA3C,CAFV;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAMA,SAAKJ,UAAL;AACI,+BACOM,KADP;AAEIJ,QAAAA,IAAI,EAAEI,KAAK,CAACJ,IAAN,CAAWW,GAAX,CAAeF,GAAG,IAAIA,GAAG,CAACC,EAAJ,KAAWL,MAAM,CAACE,OAAP,CAAeG,EAA1B,GAA+BL,MAAM,CAACE,OAAtC,GAAgDE,GAAtE;AAFV;;AAOJ,SAAKb,WAAL;AACI,+BACOQ,KADP;AAEIH,QAAAA,OAAO,EAAEI,MAAM,CAACE;AAFpB;;AAMA,SAAKV,aAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,OAAO,EAAE;AAFb;;AAKhB,SAAKR,UAAL;AACImB,MAAAA,OAAO,CAACT,KAAR,CAAcE,MAAM,CAACE,OAArB;AACA,+BACOH,KADP;AAEID,QAAAA,KAAK,EAAEE,MAAM,CAACE;AAFlB;;AAKZ;AACI,aAAOH,KAAP;AA1DR;AA4DH,CA7DD","sourcesContent":["import {\n    GET_LOGS,\n    SET_LOADING,\n    LOGS_ERROR,\n    ADD_LOG,\n    DELETE_LOG,\n    SET_CURRENT,\n    CLEAR_CURRENT,\n    UPDATE_LOG\n    } from '../actions/types';\n    \n\n\n\nconst initialState = {\n    logs :null,\n    current : null,\n    loading : false,\n    error : null\n};\n\n\n\n\nexport default (state= initialState, action) =>{\n    switch(action.type) {\n\n        case SET_LOADING:\n            return {\n                ...state,\n                loading:true\n            }\n\n            case GET_LOGS:\n                return{ \n                    ...state,\n                    logs:action.payload,\n                    loading:false\n                }\n\n                case ADD_LOG:\n                    return {\n                        ...state,\n                        logs: [...state.logs, action.payload],\n                        loading: false\n                    }\n\n                    case DELETE_LOG:\n                        return{\n                            ...state,\n                            logs: state.logs.filter(log => log.id !== action.payload),\n                            loading: false\n                        }\n\n                        case UPDATE_LOG:\n                            return{\n                                ...state,\n                                logs: state.logs.map(log => log.id === action.payload.id ? action.payload : log)\n                            }\n\n\n                        \n                        case SET_CURRENT:\n                            return {\n                                ...state,\n                                current: action.payload\n                            }\n\n\n                            case CLEAR_CURRENT:\n                                return{\n                                    ...state,\n                                    current: null\n                                }\n\n                case LOGS_ERROR:\n                    console.error(action.payload);\n                    return {\n                        ...state,\n                        error: action.payload\n                    }\n\n        default:\n            return state;\n    }\n}"]},"metadata":{},"sourceType":"module"}